shlomip100


=============================
=      File description     =
=============================
README
filesprocessing\DirectoryProcessor.java - main class
filesprocessing\QuickSort.java - quick sort implement
filesprocessing\Section.java - implement section class
filesprocessing\Type2ErrorException.java - exception class of type 2
filesprocessing\SectionTitleException.java - exception for bad section order/filter extend type 2
filesprocessing\FileException.java - exception if there is file problem extend type 2 

filesprocessing\filter\AllFilter.java - The all filter
filesprocessing\filter\BetweenFilter.java - The between filter
filesprocessing\filter\ContainsFilter.java - The contains filter
filesprocessing\filter\ExecutableFilter.java - The executable filter
filesprocessing\filter\FileFilter.java - The File filter
filesprocessing\filter\Filter.java - The filter interface
filesprocessing\filter\FilterFactory.java - The filter factory
filesprocessing\filter\GreaterThanFilter.java - The greater than filter
filesprocessing\filter\HiddenFilter.java - The hidden filter
filesprocessing\filter\PrefixFilter.java - The prefix filter
filesprocessing\filter\QuestionFilter.java - The question filter abstract class
filesprocessing\filter\SmallerThanFilter.java - The smaller than filter
filesprocessing\filter\SuffixFilter.java - The suffix filter
filesprocessing\filter\WritableFilter.java - The writable filter

filesprocessing\order\AbsOrder.java - The abs comparator
filesprocessing\order\OrderFactory.java - The order factory
filesprocessing\order\SizeOrder.java - The size comparator
filesprocessing\order\TypeOrder.java - The type comparator

filesprocessing\parser\CommandFileParser.java - parse command file
filesprocessing\parser\FilterException.java - Exception for filter problem
filesprocessing\parser\FilterParser.java - parse filter line
filesprocessing\parser\OrderException.java - Exception for order problems
filesprocessing\parser\OrderParser.java - parse order line
filesprocessing\parser\Type1ErrorException.java - type 1 exception implement

=============================
=          Design           =
=============================
There are two main phases within the software: the parsing phase and the printing phase.
A class has been created for each task in the parsing phase, so that each task is responsible for
a specific parsing. They are: filter parsing, order parsing. There are even smaller parts of the code
in each of these classes (you can see them in the methods themselves).I have found that breaking down the
parsing into small tasks makes it easier to debug as well as easier to understand the code.
In the second phase, the key to orderly and correct printing was to create the section class and
the fields that it could access. During the parsing phase, the sections he parsed were transferred to
the printing phase, and in addition, the lines with errors were determined in these classes.
Each section had a method for printing, so he could print what he needed himself because each
section contained all the relevant information.
I also used factory design to create objects like filters and orders.

=============================
=  exceptions hierarchy   =
=============================
The hierarchy is as follows:

Exception
├── Type1ErrorException
│   ├── FilterException           - If the line describing the filter does not describe proper input
│   └── OrderException            - If the line describing the order does not describe proper input
└── Type2ErrorException
    ├── SectionTitleException     - If there was a problem with the titles: FILTER, ORDER
    └── FileException             - If there was a problem accessing or using the file


There are two basic types of division provided by the course.
The internal hierarchy results from a division of the types into smaller parts - each
type was used in a different situation and therefore this division was necessary.

=============================
=  sort implement           =
=============================
I implemented a quick sort. The implement sort files stored in the ArrayList data structure.
The access to the files in this array is O (1), so since it is simple and fast, it was worth using
it for sorting. Comparisons were performed with the help of the parser's comparator.